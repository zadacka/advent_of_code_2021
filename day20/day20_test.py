from testfixtures import compare

from day20.day20 import load_day20_data, pad_image, output_image, get_neighbour_values, get_index, enhance_image, \
    count_pixels, trim_image

test_algorithm
test_image = [
    ["#", ".", ".", "#", ".", ],
    ["#", ".", ".", ".", ".", ],
    ["#", "#", ".", ".", "#", ],
    [".", ".", "#", ".", ".", ],
    [".", ".", "#", "#", "#", ],
]


def test__load_day19_data():
    algorithm, image = load_day20_data("day20_test_data.txt")
    compare(algorithm, expected=test_algorithm)
    compare(image, expected=test_image)


def test_pad_image():
    expected = [
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ],
        [".", ".", ".", "#", ".", ".", "#", ".", ".", ".", ".", ],
        [".", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", ],
        [".", ".", ".", "#", "#", ".", ".", "#", ".", ".", ".", ],
        [".", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ],
        [".", ".", ".", ".", ".", "#", "#", "#", ".", ".", ".", ],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ],
        [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ],
    ]
    compare(pad_image(test_image, 3), expected=expected)


def test_output_image():
    expected = """\
...............
...............
...............
...............
...............
.....#..#......
.....#.........
.....##..#.....
.......#.......
.......###.....
...............
...............
...............
...............
...............
"""
    compare(output_image(pad_image(test_image, pad=5)), expected=expected)


def test_enhance_image():
    expected1 = """\
...............
...............
...............
...............
.....##.##.....
....#..#.#.....
....##.#..#....
....####..#....
.....#..##.....
......##..#....
.......#.#.....
...............
...............
...............
...............
"""
    image = pad_image(test_image, pad=5)
    enhanced_image = enhance_image(image, test_algorithm)
    compare(output_image(enhanced_image), expected=expected1)
    expected2 = """\
...............
...............
...............
..........#....
....#..#.#.....
...#.#...###...
...#...##.#....
...#.....#.#...
....#.#####....
.....#.#####...
......##.##....
.......###.....
...............
...............
...............
"""
    twice_enhanced = enhance_image(enhanced_image, test_algorithm)
    compare(output_image(twice_enhanced), expected=expected2)


def test_get_neighbour_values():
    expected = [
        ".", ".", ".",
        ".", "#", ".",
        ".", "#", ".",
    ]
    compare(get_neighbour_values(r=0, c=0, input_image=test_image), expected=expected)

    expected = [
        ".", ".", ".",
        ".", ".", ".",
        ".", ".", ".",
    ]
    compare(get_neighbour_values(r=0, c=0, input_image=pad_image(test_image)), expected=expected)


def test_get_index():
    #                  0     0    0   0     1   0     0   1     0  = 18
    compare(get_index([".", ".", ".", ".", "#", ".", ".", "#", "."]), expected=18)


def test__enhancing_image__does_not_create_border_effects():
    algorithm
    expected = """\
...............
...............
...............
...............
.....####......
.....###.#.....
....#..##......
....#.#....#...
.......#..##...
......#...#....
.......#.#.#...
........#......
...............
...............
...............
"""
    image = pad_image(test_image, pad=5)
    image = pad_image(image, pad=2)
    for _ in range(2):
        image = enhance_image(image, algorithm)
        image = trim_image(image, trim=1)
    compare(output_image(image), expected=expected)


def test_count_pixels():
    compare(count_pixels(test_image), expected=10)
    padded = pad_image(test_image)
    enhanced = enhance_image(padded, test_algorithm)
    enhanced_2 = enhance_image(enhanced, test_algorithm)
    compare(count_pixels(enhanced_2), expected=35)


def test_lots_of_enhancement():
    image = pad_image(test_image, 50)
    for _ in range(50):
        image = enhance_image(image, test_algorithm)
    compare(count_pixels(image), expected=3351)
